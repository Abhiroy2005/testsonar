name: Push Request PipeLine

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  Build:
      name: Build Docker Image
      
      runs-on: ubuntu-latest
      env:
        ECR_REPO: ${{secrets.ECR_REPO}}
  
      steps:
        - name: Check Out code
          uses: actions/checkout@v2
        - name: Install Python for AWS CLI
          run: sudo apt install python3
        - name: Install AWS cli 
          run: pip3 install awscli
        - name: Build docker image and tag
          run: docker build --compress -t $ECR_REPO:$GITHUB_SHA  .
        

        
  StagingPlan:
      name: Create terraform plan for Staging envrionement
      
      needs: [Build]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2

        - name: Create Terraform Plan
          run: |
            export TF_VAR_ecr_image_api=$ECR_REPO:$GITHUB_SHA
            docker-compose -f deploy/docker-compose.yml run --rm terraform init
            docker-compose -f deploy/docker-compose.yml run --rm terraform workspace select dev || terraform workspace new dev
            docker-compose -f deploy/docker-compose.yml run --rm terraform plan 
        
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}     

  StagingApply:
      name: Staging Apply
      
      needs: [StagingPlan]
      runs-on: ubuntu-latest
      env:
        ECR_REPO: ${{secrets.ECR_REPO}}
      environment:
        name: Staging 
        url: 'http://dev.myapp.com'
      steps:
        - uses: actions/checkout@v2

        - name: Apply Terraform Plan To Staging Environment
          run: |
            export TF_VAR_ecr_image_api=$ECR_REPO:$GITHUB_SHA
            docker-compose -f deploy/docker-compose.yml run --rm terraform init
            docker-compose -f deploy/docker-compose.yml run --rm terraform workspace select dev || terraform workspace new dev
            docker-compose -f deploy/docker-compose.yml run --rm terraform plan 
        
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}     

        - name: Login to aws 
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-south-1
            
        - name: Connect to AWS ECR
          id: connect-ecr
          uses: aws-actions/amazon-ecr-login@v1
          with:
            aws-access-key-id: ${{ secrets.TEST_AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.TEST_AWS_SECRET_ACCESS_KEY }}
            aws-region: ap-south-1
            
        - name: Push docker image to ECR
          run: docker push $ECR_REPO:$GITHUB_SHA
        - name : Tag Docker Image 
          run: docker tag $ECR_REPO:$GITHUB_SHA $ECR_REPO:latest
        - name: Push tagged Image to ECR
          run:  docker push $ECR_REPO:latest             



  DeployProduction:
      name: Deploy to Production Environment
      needs: [StagingApply]
      runs-on: ubuntu-latest
      environment:
        name : Production
        url: 'http://staging.myapp.com'
      steps:
        - name: Deploy to Production
          run:  echo deployed to Production